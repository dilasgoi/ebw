#!/bin/bash

# Set absolute path to the main script
SCRIPT_DIR=$(dirname $(readlink -f $0))

# Source utility scripts
source "${SCRIPT_DIR}/../lib/configuration.sh"
source "${SCRIPT_DIR}/../lib/utils.sh"
source "${SCRIPT_DIR}/../lib/checks.sh"

# Call parse_arguments function from utils.sh
read -r FILENAME DRYRUN < <(parse_arguments "$@")

# Check if a filename and username have been provided
check_filename "${FILENAME}" || exit 1

# Search for the file in the script directory and its subdirectories
FILENAME=$(find "${SCRIPT_DIR}/.." -type f -name "${FILENAME}")

# Check if a filename has been provided
check_filename "${FILENAME}" || exit 1
check_file_exists "${FILENAME}" || exit 1

# Parse the installation file 
EASYCONFIGS=$(parse_installation_file "${FILENAME}")

# Loop over each easyconfig string
IFS=';' read -ra EASYCONFIG_STRINGS <<< "$EASYCONFIGS"
for EASYCONFIG_STRING in "${EASYCONFIG_STRINGS[@]}"; do
    IFS='|' read -ra FIELDS <<< "$EASYCONFIG_STRING"
    EASYCONFIG=$(echo ${FIELDS[0]#*: } | tr -d ' ')  # remove prefix up to colon and space
    COMMON=${FIELDS[1]#*: }  # remove prefix up to colon and space
    GPU=${FIELDS[2]#*: }  # remove prefix up to colon and space
    CUDA_COMPUTE_CAPABILITIES=${FIELDS[3]#*: }  # remove prefix up to colon and space
    ENABLED=${FIELDS[4]#*: }  # remove prefix up to colon and space
    EULA=${FIELDS[5]#*: }  # remove prefix up to colon and space
    PARALLEL=${FIELDS[6]#*: }  # remove prefix up to colon and space

    echo ${EASYCONFIG_STRING}

    if [ "${ENABLED}" == "false" ]; then
        continue  # Skip to next iteration if this easyconfig is not enabled
    fi

    # Load EasyBuild's configuration
    read -r BUILD_PATH HIDE_DEPS INSTALL_PATH COMMON_PATH SOURCE_PATH GPU_PATH ROBOT_PATHS MODULES_TOOL HOOKS < <(load_eb_configuration ${COMMON})

    # Create the installation command
    EB_COMMAND=$(create_eb_command ${BUILD_PATH} ${HIDE_DEPS} ${INSTALL_PATH} ${SOURCE_PATH} ${ROBOT_PATHS} ${MODULES_TOOL} ${HOOKS} ${EASYCONFIG})

    # Use the add_optional_options function to add optional flags to the command
    EB_COMMAND=$(add_optional_options "${EB_COMMAND}" "${PARALLEL}" "${EULA}" "${GPU}" "${CUDA_COMPUTE_CAPABILITIES}")

    # If not a dry run, prepare for logging and run eb
    if [ ${DRYRUN} -eq 0 ]; then
        # Prepare for logging
        TIMESTAMP="$(date +%Y%m%d%H%M%S)"
        LOGDIR="${SCRIPT_DIR}/../logs"
        LOGFILE="${LOGDIR}/$(echo "${EASYCONFIG}" | sed 's/\.eb$//')-${TIMESTAMP}.log"

        # Register the start time and the easyconfig name
        echo "$(date): Installation started for ${EASYCONFIG} by ${USERNAME}" | tee -a "${LOGFILE}"

        # Log the content of the JSON file
        echo "JSON file content:" | tee -a "${LOGFILE}"
        cat "${FILENAME}" | tee -a "${LOGFILE}"

        # Log the SHA256 hash of the JSON file
        echo "SHA256 hash of the JSON file:" | tee -a "${LOGFILE}"
        sha256sum "${FILENAME}" | tee -a "${LOGFILE}"

        ${EB_COMMAND} -r --trace
        EXIT_STATUS=$?

        # Call the function to check the exit status
        check_exit_status "${EXIT_STATUS}" \
                          "${EASYCONFIG}" \
                          "${LOGFILE}"

        post_execution_summary "${FILENAME}" "${APPLICATION}" "${VERSION}" "${TOOLCHAIN}" \
                                   "${TOOLCHAIN_VERSION}" "${SUFFIX}" "${PARALLEL}" "${EASYCONFIG}" \
                                   "${EB_COMMAND}" "${LOGFILE}"

        log_to_history "${TIMESTAMP}" "${EASYCONFIG}" "${EXIT_STATUS}" "${LOGDIR}"
    else
        # Dry run
        echo "Performing dry run for ${EASYCONFIG}"
        ${EB_COMMAND} -Dr
    fi
done

